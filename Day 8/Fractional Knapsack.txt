bool  comp(Item x, Item y){
        double r1=double (x.value)/double (x.weight);
        double r2=double (y.value)/double(y.weight);
        
        return r1>r2;
    }

class Solution
{
    public:
    
    
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
      // sort array in descending order of their value per weight.
      sort(arr, arr+n, comp);
        
      int curWeight=0;
      double totalValue=0.0;
      
      for(int i=0;i<n;i++){
         
          if(curWeight+arr[i].weight <= W){
              curWeight+=arr[i].weight;
              totalValue += arr[i].value;
          }
          else{
              int remain=W-curWeight;
              totalValue+= (double(arr[i].value)*double(remain))/double(arr[i].weight);
              break;
          }
      }
      return totalValue;
    }
};