class Solution {
public:
TreeNode *solve(vector<int>preorder,vector<int>inorder,int &index,int instart,int inend,int n,unordered_map<int,int>ump)
{
    if(instart>inend || index>=n)
        return NULL;
    int item=preorder[index++];
    TreeNode *root=new TreeNode(item);
    int position=ump[item];
    
    root->left=solve(preorder,inorder,index,instart,position-1,n,ump);
    root->right=solve(preorder,inorder,index,position+1,inend,n,ump);
    return root;
}
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n=preorder.size();
        int index=0;
        vector<int>inorder;
        for(int i=0;i<preorder.size();i++)
            inorder.push_back(preorder[i]);
        sort(inorder.begin(),inorder.end());
        unordered_map<int,int>ump;
        for(int i=0;i<inorder.size();i++)
        ump[inorder[i]]=i;
        
        TreeNode *ans=solve(preorder,inorder,index,0,n-1,n,ump);
        return ans;
    }
};