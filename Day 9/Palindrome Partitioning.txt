class Solution {
public:
    vector<vector<string>> result;
    vector<vector<string>> partition(string s) {
        dfs(0, s, {});
        return result;
    }
    string reverseStr(string& str)
    {
        int len = str.length();
        int n = len-1;
        int i = 0;
        while(i<=n)
        {
            //Using the swap method to switch values at each index
            swap(str[i],str[n]);
            n = n-1;
            i = i+1;
        }
        return str;
    }
    void dfs(int pointer, string s, vector<string> curr)
    {   
        
        if(pointer == s.size())
        {
            result.push_back(curr);
            return;
        }
        for(int i = pointer; i <= s.size() - 1; i++)
        {
            string tmp1 = s.substr(pointer, i - pointer + 1);
            string tmp2 = tmp1;
            tmp2 = reverseStr(tmp2);
            if(tmp2 == tmp1)
            {
                curr.push_back(tmp1);
                dfs(i+1, s, curr);
                curr.pop_back();
            }
        }
        
    }
};